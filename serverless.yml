# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: profile-update-lambda

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  profile: cda
  stage: ${opt:stage, 'dev'}
  environment:
    db_user: ${file(config.${self:provider.stage}.json):db_user}
    db_password: ${file(config.${self:provider.stage}.json):db_password}
    db_database: ${file(config.${self:provider.stage}.json):db_database}
    db_host: ${file(config.${self:provider.stage}.json):db_host}
    db_port: ${file(config.${self:provider.stage}.json):db_port}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# todo Use variables and find out why this doesn't actually update the lambda definition
iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "s3:GetObject"
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - "ccfs-misc-dev"
          - "/beverage-profile-update/*"

# you can define service wide environment variables here
#environment:
  #key1: val1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  addBeverage:
    handler: handler.addBeverage
    events:
      - existings3:
          bucket: ${file(config.${self:provider.stage}.json):s3_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${file(config.${self:provider.stage}.json):s3_prefix}
            - suffix: .csv
    vpc:
      securityGroupIds:
        - sg-1c3cfe65
      subnetIds:
        - subnet-d67b9ffc
        - subnet-76439300

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
